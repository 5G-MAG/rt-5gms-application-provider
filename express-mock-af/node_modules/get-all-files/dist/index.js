import { lstatSync, readdirSync } from 'node:fs';
import { lstat, readdir } from 'node:fs/promises';
import { sep, resolve } from 'node:path';

const getAllFilesSync = (filename, options) => {
  const normalizedOptions = normalizeOptions(options);
  const files = {
    *[Symbol.iterator]() {
      if (!lstatSync(filename).isDirectory()) {
        yield filename;
        return;
      }
      yield* function* walk(dirname) {
        if (normalizedOptions.isExcludedDir(dirname)) {
          return;
        }
        for (const dirent of readdirSync(dirname, {
          withFileTypes: true
        })) {
          const filename = dirname + dirent.name;
          if (dirent.isDirectory()) {
            yield* walk(filename + sep);
          } else {
            yield filename;
          }
        }
      }(normalizeDirname(filename, normalizedOptions));
    },
    toArray: () => [...files]
  };
  return files;
};
const getAllFiles = (filename, options) => {
  const normalizedOptions = normalizeOptions(options);
  const files = {
    async *[Symbol.asyncIterator]() {
      if (!(await lstat(filename)).isDirectory()) {
        yield filename;
        return;
      }
      const dirnames = [];
      let filenames = [];
      const promises = new Set();
      const walk = async dirname => {
        const promise = (async () => {
          if (normalizedOptions.isExcludedDir(dirname)) {
            return;
          }
          for (const dirent of await readdir(dirname, {
            withFileTypes: true
          })) {
            const filename = dirname + dirent.name;
            if (dirent.isDirectory()) {
              dirnames.push(filename + sep);
            } else {
              filenames.push(filename);
            }
          }
        })();
        promises.add(promise);
        await promise;
        promises.delete(promise);
      };
      void walk(normalizeDirname(filename, normalizedOptions));

      // eslint-disable-next-line typescript/no-unnecessary-condition
      while (true) {
        await Promise.race(promises);
        if (filenames.length > 0) {
          const previousFilenames = filenames;
          filenames = [];
          yield* previousFilenames;
        }
        while (dirnames.length > 0) {
          void walk(dirnames.pop());
        }
        if (promises.size === 0) {
          break;
        }
      }
    },
    toArray: async () => {
      const filenames = [];
      for await (const filename of files) {
        filenames.push(filename);
      }
      return filenames;
    }
  };
  return files;
};
const normalizeOptions = ({
  resolve = false,
  isExcludedDir = () => false
} = {}) => ({
  resolve,
  isExcludedDir
});
const normalizeDirname = (dirname, options) => {
  if (options.resolve) {
    dirname = resolve(dirname);
  }
  if (dirname.length > 0 && dirname.at(-1) !== sep) {
    dirname += sep;
  }
  return dirname;
};

export { getAllFiles, getAllFilesSync };
